// method 1:

class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        if(gas.length == 0 || cost.length == 0 || gas.length != cost.length) return -1;
        int total = 0, sum = 0, start = 0;
        for(int i=0; i<gas.length; i++) {
            total += gas[i] - cost[i];
            if(sum < 0) {
                sum = (gas[i]-cost[i]);
                start = i;
            } else {
                sum += (gas[i]-cost[i]);
            }
        }
        return total < 0 ? -1 : start;
    }
}

// time: O(n), space: O(1)

// method 2:
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int len = gas.length, count = 0, start = len, end = 0;
        while(end < start) {
            if(count >= 0) {
                count += gas[end] - cost[end];
                end++;
            } else {
                start--;
                count += gas[start] - cost[start];
            }
        }
        return count >= 0 ? ((start == len) ? 0 : start) : -1;
    }
}
