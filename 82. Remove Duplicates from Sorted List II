// method 1: iteration
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode cur = dummy;
        int sameNum = 0;
        while(cur.next != null && cur.next.next != null) {
            if(cur.next.val == cur.next.next.val){
                sameNum = cur.next.val;
                while( cur.next != null && cur.next.val == sameNum) {
                cur.next = cur.next.next;
                }
            }
            else cur = cur.next;
        }
        return dummy.next;
    }
}

// time: O(n)
// space : O(1)

// method 2: recursion

class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null) return head;
        if(head.next != null && head.val == head.next.val) {
            while(head.next != null && head.val == head.next.val){
                head = head.next;
            }
            return deleteDuplicates(head.next);
        }
        else {
            head.next = deleteDuplicates(head.next);
            return head;
        }
    }
}
