// method 1:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int[] count = new int[256];
        int res = 0, start = 0;
        
        for(int i=0; i<s.length(); i++) {
            char ch = s.charAt(i);
            while(count[ch] > 0) {
                count[s.charAt(start)]--;
                start++;
            }
            count[ch]++;
            res = Math.max(i-start+1, res);
        }
        return res;
    }
}


// method 2:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> charSet = new HashSet<>();
        int left = 0, right = 0, max = 0;
        
        while(right < s.length()) {
            if(!charSet.contains(s.charAt(right))) {
                charSet.add(s.charAt(right));
                right++;
                max = Math.max(max, charSet.size());
            } else {
                charSet.remove(s.charAt(left));
                left++;
            }
        }
        return max;
    }
}

// time: O(n);

// method 3:
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s == null || s.length() == 0) return 0;
        HashMap<Character, Integer> map = new HashMap<>();
        int start = 0, end = 0, max = 0;
        while(end < s.length()) {
            char ch = s.charAt(end);
            if(map.containsKey(ch)) {
                start = Math.max(start, map.get(ch)+1);
            }
            map.put(ch, end);
            max = Math.max(max, end-start+1);
            end++;
        }
        return max;
    }
}


// time: O(n)
// space: O(n)
