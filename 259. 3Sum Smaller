// method 1:

class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        if(nums == null || nums.length == 0) return 0;
        Arrays.sort(nums); //O(nlogn)
        int len = nums.length;
        int count = 0;
        
        for(int i=0; i<nums.length; i++) {
            int start = i+1, end = len - 1;
            int remain = target - nums[i];
            
            while(start < end) {
                if(nums[start] + nums[end] < remain) {  // for + while = O(n^2);
                    count += end - start;
                    start++;
                }
                else {
                    end--;
                }
            }
        }
        return count; // total time complexity == O(n^2);
    }
}

// method 2:
class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        Arrays.sort(nums);
        int res = 0;
        for(int i=0; i<nums.length; i++) {
            int left = i+1, right = nums.length-1;
            
            while(left < right) {
                int total = nums[i] + nums[left] + nums[right];
                if(total < target) {
                    res += right-left;
                    left++;
                } else
                    right--;
            }
        }
        return res;
    }
}
